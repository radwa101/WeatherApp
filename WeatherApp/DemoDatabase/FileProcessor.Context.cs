//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoDatabase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class c227_FileProcessorEntities : DbContext
    {
        public c227_FileProcessorEntities()
            : base("name=c227_FileProcessorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ca_consuming_application> ca_consuming_application { get; set; }
        public virtual DbSet<cas_consuming_application_settings> cas_consuming_application_settings { get; set; }
        public virtual DbSet<ds_datasource> ds_datasource { get; set; }
        public virtual DbSet<ed_element_definition> ed_element_definition { get; set; }
        public virtual DbSet<fd_file_definition> fd_file_definition { get; set; }
        public virtual DbSet<fr_record> fr_record { get; set; }
        public virtual DbSet<frd_record_definition> frd_record_definition { get; set; }
        public virtual DbSet<ft_file_transaction> ft_file_transaction { get; set; }
        public virtual DbSet<ft_transaction> ft_transaction { get; set; }
        public virtual DbSet<ftd_transaction_definition> ftd_transaction_definition { get; set; }
        public virtual DbSet<sp_stored_procedure> sp_stored_procedure { get; set; }
    
        public virtual int DeleteConsumingApplication(Nullable<int> consumingApplicationId)
        {
            var consumingApplicationIdParameter = consumingApplicationId.HasValue ?
                new ObjectParameter("ConsumingApplicationId", consumingApplicationId) :
                new ObjectParameter("ConsumingApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteConsumingApplication", consumingApplicationIdParameter);
        }
    
        public virtual int DeleteConsumingApplicationSetting(Nullable<int> consumingApplicationSettingId)
        {
            var consumingApplicationSettingIdParameter = consumingApplicationSettingId.HasValue ?
                new ObjectParameter("ConsumingApplicationSettingId", consumingApplicationSettingId) :
                new ObjectParameter("ConsumingApplicationSettingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteConsumingApplicationSetting", consumingApplicationSettingIdParameter);
        }
    
        public virtual int DeleteDatasource(Nullable<int> datasourceId)
        {
            var datasourceIdParameter = datasourceId.HasValue ?
                new ObjectParameter("DatasourceId", datasourceId) :
                new ObjectParameter("DatasourceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDatasource", datasourceIdParameter);
        }
    
        public virtual int DeleteElementDefinition(Nullable<int> elementId)
        {
            var elementIdParameter = elementId.HasValue ?
                new ObjectParameter("ElementId", elementId) :
                new ObjectParameter("ElementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteElementDefinition", elementIdParameter);
        }
    
        public virtual int DeleteFileDefinition(Nullable<int> fileId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFileDefinition", fileIdParameter);
        }
    
        public virtual int DeleteFileTransaction(Nullable<int> fileTransactionId)
        {
            var fileTransactionIdParameter = fileTransactionId.HasValue ?
                new ObjectParameter("FileTransactionId", fileTransactionId) :
                new ObjectParameter("FileTransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFileTransaction", fileTransactionIdParameter);
        }
    
        public virtual int DeleteRecord(Nullable<int> recordId)
        {
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRecord", recordIdParameter);
        }
    
        public virtual int DeleteRecordDefinition(Nullable<int> recordDefinitionId)
        {
            var recordDefinitionIdParameter = recordDefinitionId.HasValue ?
                new ObjectParameter("RecordDefinitionId", recordDefinitionId) :
                new ObjectParameter("RecordDefinitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRecordDefinition", recordDefinitionIdParameter);
        }
    
        public virtual int DeleteTransaction(Nullable<int> transactionId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTransaction", transactionIdParameter);
        }
    
        public virtual int DeleteTransactionDefinition(Nullable<int> transactionDefinitionId)
        {
            var transactionDefinitionIdParameter = transactionDefinitionId.HasValue ?
                new ObjectParameter("TransactionDefinitionId", transactionDefinitionId) :
                new ObjectParameter("TransactionDefinitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTransactionDefinition", transactionDefinitionIdParameter);
        }
    
        public virtual int GetConsumingApplications(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConsumingApplications", nameParameter);
        }
    
        public virtual int GetConsumingApplicationSettings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConsumingApplicationSettings");
        }
    
        public virtual int GetDatasources()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDatasources");
        }
    
        public virtual int GetElementDefinitions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetElementDefinitions");
        }
    
        public virtual int GetFileDefinitions(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileDefinitions", fileNameParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetFileDefLastUpdatedDate(Nullable<int> transactionId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetFileDefLastUpdatedDate", transactionIdParameter);
        }
    
        public virtual int GetFileTransactions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFileTransactions");
        }
    
        public virtual int GetRecordDefinitions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRecordDefinitions", nameParameter);
        }
    
        public virtual int GetRecords(string recordName)
        {
            var recordNameParameter = recordName != null ?
                new ObjectParameter("RecordName", recordName) :
                new ObjectParameter("RecordName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRecords", recordNameParameter);
        }
    
        public virtual int GetTransactionDefinitions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTransactionDefinitions");
        }
    
        public virtual int GetTransactions(string transactionName)
        {
            var transactionNameParameter = transactionName != null ?
                new ObjectParameter("TransactionName", transactionName) :
                new ObjectParameter("TransactionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTransactions", transactionNameParameter);
        }
    
        public virtual int InsertConsumingApplication(string name, string description, Nullable<System.DateTime> createDate, string createUserId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertConsumingApplication", nameParameter, descriptionParameter, createDateParameter, createUserIdParameter);
        }
    
        public virtual int InsertConsumingApplicationSetting(Nullable<int> consumingApplicationId, string key, string value, Nullable<System.DateTime> createDate, string createUserId)
        {
            var consumingApplicationIdParameter = consumingApplicationId.HasValue ?
                new ObjectParameter("ConsumingApplicationId", consumingApplicationId) :
                new ObjectParameter("ConsumingApplicationId", typeof(int));
    
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertConsumingApplicationSetting", consumingApplicationIdParameter, keyParameter, valueParameter, createDateParameter, createUserIdParameter);
        }
    
        public virtual int InsertDatasource(Nullable<int> consumingApplicationId, string server, string catalog, Nullable<System.DateTime> createDate, string createUserId)
        {
            var consumingApplicationIdParameter = consumingApplicationId.HasValue ?
                new ObjectParameter("ConsumingApplicationId", consumingApplicationId) :
                new ObjectParameter("ConsumingApplicationId", typeof(int));
    
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            var catalogParameter = catalog != null ?
                new ObjectParameter("Catalog", catalog) :
                new ObjectParameter("Catalog", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDatasource", consumingApplicationIdParameter, serverParameter, catalogParameter, createDateParameter, createUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertElementDefinition(string elementName, string dataType, string filePadType, string filePadCharacter, string filePadCharacterOnEmpty, string createUserId, string sourceFormatString)
        {
            var elementNameParameter = elementName != null ?
                new ObjectParameter("ElementName", elementName) :
                new ObjectParameter("ElementName", typeof(string));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var filePadTypeParameter = filePadType != null ?
                new ObjectParameter("FilePadType", filePadType) :
                new ObjectParameter("FilePadType", typeof(string));
    
            var filePadCharacterParameter = filePadCharacter != null ?
                new ObjectParameter("FilePadCharacter", filePadCharacter) :
                new ObjectParameter("FilePadCharacter", typeof(string));
    
            var filePadCharacterOnEmptyParameter = filePadCharacterOnEmpty != null ?
                new ObjectParameter("FilePadCharacterOnEmpty", filePadCharacterOnEmpty) :
                new ObjectParameter("FilePadCharacterOnEmpty", typeof(string));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            var sourceFormatStringParameter = sourceFormatString != null ?
                new ObjectParameter("SourceFormatString", sourceFormatString) :
                new ObjectParameter("SourceFormatString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertElementDefinition", elementNameParameter, dataTypeParameter, filePadTypeParameter, filePadCharacterParameter, filePadCharacterOnEmptyParameter, createUserIdParameter, sourceFormatStringParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertFileDefinition(string fileName, string description, string headerTemplate, string trailerTemplate, string createUserId)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var headerTemplateParameter = headerTemplate != null ?
                new ObjectParameter("HeaderTemplate", headerTemplate) :
                new ObjectParameter("HeaderTemplate", typeof(string));
    
            var trailerTemplateParameter = trailerTemplate != null ?
                new ObjectParameter("TrailerTemplate", trailerTemplate) :
                new ObjectParameter("TrailerTemplate", typeof(string));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertFileDefinition", fileNameParameter, descriptionParameter, headerTemplateParameter, trailerTemplateParameter, createUserIdParameter);
        }
    
        public virtual int InsertFileTransaction(Nullable<int> fileId, Nullable<int> transactionId, string createUserId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFileTransaction", fileIdParameter, transactionIdParameter, createUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertRecord(string recordName, string description, string template, string createUserId, Nullable<int> recordLength, string identifier, Nullable<bool> xML)
        {
            var recordNameParameter = recordName != null ?
                new ObjectParameter("RecordName", recordName) :
                new ObjectParameter("RecordName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var templateParameter = template != null ?
                new ObjectParameter("Template", template) :
                new ObjectParameter("Template", typeof(string));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            var recordLengthParameter = recordLength.HasValue ?
                new ObjectParameter("RecordLength", recordLength) :
                new ObjectParameter("RecordLength", typeof(int));
    
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var xMLParameter = xML.HasValue ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertRecord", recordNameParameter, descriptionParameter, templateParameter, createUserIdParameter, recordLengthParameter, identifierParameter, xMLParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertRecordDefinition(Nullable<int> recordId, string name, Nullable<int> elementId, Nullable<int> sequence, Nullable<int> length, Nullable<int> decimalPlaces, Nullable<bool> mandatory, string createUserId, Nullable<int> line)
        {
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var elementIdParameter = elementId.HasValue ?
                new ObjectParameter("ElementId", elementId) :
                new ObjectParameter("ElementId", typeof(int));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var decimalPlacesParameter = decimalPlaces.HasValue ?
                new ObjectParameter("DecimalPlaces", decimalPlaces) :
                new ObjectParameter("DecimalPlaces", typeof(int));
    
            var mandatoryParameter = mandatory.HasValue ?
                new ObjectParameter("Mandatory", mandatory) :
                new ObjectParameter("Mandatory", typeof(bool));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertRecordDefinition", recordIdParameter, nameParameter, elementIdParameter, sequenceParameter, lengthParameter, decimalPlacesParameter, mandatoryParameter, createUserIdParameter, lineParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertTransaction(string transactionName, string description, string headerTemplate, string trailerTemplate, string createUserId, Nullable<int> headerLength, Nullable<int> trailerLength, Nullable<int> headerCount, Nullable<int> trailerCount)
        {
            var transactionNameParameter = transactionName != null ?
                new ObjectParameter("TransactionName", transactionName) :
                new ObjectParameter("TransactionName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var headerTemplateParameter = headerTemplate != null ?
                new ObjectParameter("HeaderTemplate", headerTemplate) :
                new ObjectParameter("HeaderTemplate", typeof(string));
    
            var trailerTemplateParameter = trailerTemplate != null ?
                new ObjectParameter("TrailerTemplate", trailerTemplate) :
                new ObjectParameter("TrailerTemplate", typeof(string));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            var headerLengthParameter = headerLength.HasValue ?
                new ObjectParameter("HeaderLength", headerLength) :
                new ObjectParameter("HeaderLength", typeof(int));
    
            var trailerLengthParameter = trailerLength.HasValue ?
                new ObjectParameter("TrailerLength", trailerLength) :
                new ObjectParameter("TrailerLength", typeof(int));
    
            var headerCountParameter = headerCount.HasValue ?
                new ObjectParameter("HeaderCount", headerCount) :
                new ObjectParameter("HeaderCount", typeof(int));
    
            var trailerCountParameter = trailerCount.HasValue ?
                new ObjectParameter("TrailerCount", trailerCount) :
                new ObjectParameter("TrailerCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertTransaction", transactionNameParameter, descriptionParameter, headerTemplateParameter, trailerTemplateParameter, createUserIdParameter, headerLengthParameter, trailerLengthParameter, headerCountParameter, trailerCountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertTransactionDefinition(Nullable<int> transactionId, Nullable<int> recordId, Nullable<int> sequence, Nullable<int> minOccurrences, Nullable<int> maxOccurrences, string createUserId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var minOccurrencesParameter = minOccurrences.HasValue ?
                new ObjectParameter("MinOccurrences", minOccurrences) :
                new ObjectParameter("MinOccurrences", typeof(int));
    
            var maxOccurrencesParameter = maxOccurrences.HasValue ?
                new ObjectParameter("MaxOccurrences", maxOccurrences) :
                new ObjectParameter("MaxOccurrences", typeof(int));
    
            var createUserIdParameter = createUserId != null ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertTransactionDefinition", transactionIdParameter, recordIdParameter, sequenceParameter, minOccurrencesParameter, maxOccurrencesParameter, createUserIdParameter);
        }
    
        public virtual int UpdateConsumingApplication(Nullable<int> consumingApplicationId, string name, string description, Nullable<System.DateTime> updateDate, string updateUserId)
        {
            var consumingApplicationIdParameter = consumingApplicationId.HasValue ?
                new ObjectParameter("ConsumingApplicationId", consumingApplicationId) :
                new ObjectParameter("ConsumingApplicationId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConsumingApplication", consumingApplicationIdParameter, nameParameter, descriptionParameter, updateDateParameter, updateUserIdParameter);
        }
    
        public virtual int UpdateConsumingApplicationSetting(Nullable<int> consumingApplicationSettingId, Nullable<int> consumingApplicationId, string key, string value, Nullable<System.DateTime> updateDate, string updateUserId)
        {
            var consumingApplicationSettingIdParameter = consumingApplicationSettingId.HasValue ?
                new ObjectParameter("ConsumingApplicationSettingId", consumingApplicationSettingId) :
                new ObjectParameter("ConsumingApplicationSettingId", typeof(int));
    
            var consumingApplicationIdParameter = consumingApplicationId.HasValue ?
                new ObjectParameter("ConsumingApplicationId", consumingApplicationId) :
                new ObjectParameter("ConsumingApplicationId", typeof(int));
    
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConsumingApplicationSetting", consumingApplicationSettingIdParameter, consumingApplicationIdParameter, keyParameter, valueParameter, updateDateParameter, updateUserIdParameter);
        }
    
        public virtual int UpdateDatasource(Nullable<int> datasourceId, Nullable<int> consumingApplicationId, string server, string catalog, Nullable<System.DateTime> updateDate, string updateUserId)
        {
            var datasourceIdParameter = datasourceId.HasValue ?
                new ObjectParameter("DatasourceId", datasourceId) :
                new ObjectParameter("DatasourceId", typeof(int));
    
            var consumingApplicationIdParameter = consumingApplicationId.HasValue ?
                new ObjectParameter("ConsumingApplicationId", consumingApplicationId) :
                new ObjectParameter("ConsumingApplicationId", typeof(int));
    
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            var catalogParameter = catalog != null ?
                new ObjectParameter("Catalog", catalog) :
                new ObjectParameter("Catalog", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDatasource", datasourceIdParameter, consumingApplicationIdParameter, serverParameter, catalogParameter, updateDateParameter, updateUserIdParameter);
        }
    
        public virtual int UpdateElementDefinition(Nullable<int> elementId, string elementName, string dataType, string filePadType, string filePadCharacter, string filePadCharacterOnEmpty, string updateUserId, string sourceFormatString)
        {
            var elementIdParameter = elementId.HasValue ?
                new ObjectParameter("ElementId", elementId) :
                new ObjectParameter("ElementId", typeof(int));
    
            var elementNameParameter = elementName != null ?
                new ObjectParameter("ElementName", elementName) :
                new ObjectParameter("ElementName", typeof(string));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var filePadTypeParameter = filePadType != null ?
                new ObjectParameter("FilePadType", filePadType) :
                new ObjectParameter("FilePadType", typeof(string));
    
            var filePadCharacterParameter = filePadCharacter != null ?
                new ObjectParameter("FilePadCharacter", filePadCharacter) :
                new ObjectParameter("FilePadCharacter", typeof(string));
    
            var filePadCharacterOnEmptyParameter = filePadCharacterOnEmpty != null ?
                new ObjectParameter("FilePadCharacterOnEmpty", filePadCharacterOnEmpty) :
                new ObjectParameter("FilePadCharacterOnEmpty", typeof(string));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            var sourceFormatStringParameter = sourceFormatString != null ?
                new ObjectParameter("SourceFormatString", sourceFormatString) :
                new ObjectParameter("SourceFormatString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateElementDefinition", elementIdParameter, elementNameParameter, dataTypeParameter, filePadTypeParameter, filePadCharacterParameter, filePadCharacterOnEmptyParameter, updateUserIdParameter, sourceFormatStringParameter);
        }
    
        public virtual int UpdateFileDefinition(Nullable<int> fileId, string fileName, string description, string headerTemplate, string trailerTemplate, string updateUserId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var headerTemplateParameter = headerTemplate != null ?
                new ObjectParameter("HeaderTemplate", headerTemplate) :
                new ObjectParameter("HeaderTemplate", typeof(string));
    
            var trailerTemplateParameter = trailerTemplate != null ?
                new ObjectParameter("TrailerTemplate", trailerTemplate) :
                new ObjectParameter("TrailerTemplate", typeof(string));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileDefinition", fileIdParameter, fileNameParameter, descriptionParameter, headerTemplateParameter, trailerTemplateParameter, updateUserIdParameter);
        }
    
        public virtual int UpdateFileTransaction(Nullable<int> fileTransactionId, Nullable<int> fileId, Nullable<int> transactionId, string updateUserId)
        {
            var fileTransactionIdParameter = fileTransactionId.HasValue ?
                new ObjectParameter("FileTransactionId", fileTransactionId) :
                new ObjectParameter("FileTransactionId", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFileTransaction", fileTransactionIdParameter, fileIdParameter, transactionIdParameter, updateUserIdParameter);
        }
    
        public virtual int UpdateRecord(Nullable<int> recordId, string recordName, string description, string template, string updateUserId, Nullable<int> recordLength, string identifier, Nullable<bool> xML)
        {
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var recordNameParameter = recordName != null ?
                new ObjectParameter("RecordName", recordName) :
                new ObjectParameter("RecordName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var templateParameter = template != null ?
                new ObjectParameter("Template", template) :
                new ObjectParameter("Template", typeof(string));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            var recordLengthParameter = recordLength.HasValue ?
                new ObjectParameter("RecordLength", recordLength) :
                new ObjectParameter("RecordLength", typeof(int));
    
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            var xMLParameter = xML.HasValue ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRecord", recordIdParameter, recordNameParameter, descriptionParameter, templateParameter, updateUserIdParameter, recordLengthParameter, identifierParameter, xMLParameter);
        }
    
        public virtual int UpdateRecordDefinition(Nullable<int> recordDefinitionId, Nullable<int> recordId, string name, Nullable<int> elementId, Nullable<int> sequence, Nullable<int> length, Nullable<int> decimalPlaces, Nullable<bool> mandatory, string updateUserId, Nullable<int> line)
        {
            var recordDefinitionIdParameter = recordDefinitionId.HasValue ?
                new ObjectParameter("RecordDefinitionId", recordDefinitionId) :
                new ObjectParameter("RecordDefinitionId", typeof(int));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var elementIdParameter = elementId.HasValue ?
                new ObjectParameter("ElementId", elementId) :
                new ObjectParameter("ElementId", typeof(int));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var decimalPlacesParameter = decimalPlaces.HasValue ?
                new ObjectParameter("DecimalPlaces", decimalPlaces) :
                new ObjectParameter("DecimalPlaces", typeof(int));
    
            var mandatoryParameter = mandatory.HasValue ?
                new ObjectParameter("Mandatory", mandatory) :
                new ObjectParameter("Mandatory", typeof(bool));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRecordDefinition", recordDefinitionIdParameter, recordIdParameter, nameParameter, elementIdParameter, sequenceParameter, lengthParameter, decimalPlacesParameter, mandatoryParameter, updateUserIdParameter, lineParameter);
        }
    
        public virtual int UpdateTransaction(Nullable<int> transactionId, string transactionName, string description, string headerTemplate, string trailerTemplate, string updateUserId, Nullable<int> headerLength, Nullable<int> trailerLength, Nullable<int> headerCount, Nullable<int> trailerCount)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var transactionNameParameter = transactionName != null ?
                new ObjectParameter("TransactionName", transactionName) :
                new ObjectParameter("TransactionName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var headerTemplateParameter = headerTemplate != null ?
                new ObjectParameter("HeaderTemplate", headerTemplate) :
                new ObjectParameter("HeaderTemplate", typeof(string));
    
            var trailerTemplateParameter = trailerTemplate != null ?
                new ObjectParameter("TrailerTemplate", trailerTemplate) :
                new ObjectParameter("TrailerTemplate", typeof(string));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            var headerLengthParameter = headerLength.HasValue ?
                new ObjectParameter("HeaderLength", headerLength) :
                new ObjectParameter("HeaderLength", typeof(int));
    
            var trailerLengthParameter = trailerLength.HasValue ?
                new ObjectParameter("TrailerLength", trailerLength) :
                new ObjectParameter("TrailerLength", typeof(int));
    
            var headerCountParameter = headerCount.HasValue ?
                new ObjectParameter("HeaderCount", headerCount) :
                new ObjectParameter("HeaderCount", typeof(int));
    
            var trailerCountParameter = trailerCount.HasValue ?
                new ObjectParameter("TrailerCount", trailerCount) :
                new ObjectParameter("TrailerCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransaction", transactionIdParameter, transactionNameParameter, descriptionParameter, headerTemplateParameter, trailerTemplateParameter, updateUserIdParameter, headerLengthParameter, trailerLengthParameter, headerCountParameter, trailerCountParameter);
        }
    
        public virtual int UpdateTransactionDefinition(Nullable<int> transactionDefinitionId, Nullable<int> transactionId, Nullable<int> recordId, Nullable<int> sequence, Nullable<int> minOccurrences, Nullable<int> maxOccurrences, string updateUserId)
        {
            var transactionDefinitionIdParameter = transactionDefinitionId.HasValue ?
                new ObjectParameter("TransactionDefinitionId", transactionDefinitionId) :
                new ObjectParameter("TransactionDefinitionId", typeof(int));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var minOccurrencesParameter = minOccurrences.HasValue ?
                new ObjectParameter("MinOccurrences", minOccurrences) :
                new ObjectParameter("MinOccurrences", typeof(int));
    
            var maxOccurrencesParameter = maxOccurrences.HasValue ?
                new ObjectParameter("MaxOccurrences", maxOccurrences) :
                new ObjectParameter("MaxOccurrences", typeof(int));
    
            var updateUserIdParameter = updateUserId != null ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransactionDefinition", transactionDefinitionIdParameter, transactionIdParameter, recordIdParameter, sequenceParameter, minOccurrencesParameter, maxOccurrencesParameter, updateUserIdParameter);
        }
    }
}
