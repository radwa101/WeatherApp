//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherApp.WeatherService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/WeatherWcf.Models")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ForecastDetailsUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IconField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationDisplayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemperatureDisplayField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.DateTimeField, value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ForecastDetailsUrl {
            get {
                return this.ForecastDetailsUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ForecastDetailsUrlField, value) != true)) {
                    this.ForecastDetailsUrlField = value;
                    this.RaisePropertyChanged("ForecastDetailsUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Icon {
            get {
                return this.IconField;
            }
            set {
                if ((object.ReferenceEquals(this.IconField, value) != true)) {
                    this.IconField = value;
                    this.RaisePropertyChanged("Icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationDisplayed {
            get {
                return this.LocationDisplayedField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationDisplayedField, value) != true)) {
                    this.LocationDisplayedField = value;
                    this.RaisePropertyChanged("LocationDisplayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemperatureDisplay {
            get {
                return this.TemperatureDisplayField;
            }
            set {
                if ((object.ReferenceEquals(this.TemperatureDisplayField, value) != true)) {
                    this.TemperatureDisplayField = value;
                    this.RaisePropertyChanged("TemperatureDisplay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather_Request", Namespace="http://schemas.datacontract.org/2004/07/WeatherWcf.Interfaces.DataTransferObjects" +
        "")]
    [System.SerializableAttribute()]
    public partial class Weather_Request : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CelciusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FahrenheitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Celcius {
            get {
                return this.CelciusField;
            }
            set {
                if ((this.CelciusField.Equals(value) != true)) {
                    this.CelciusField = value;
                    this.RaisePropertyChanged("Celcius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fahrenheit {
            get {
                return this.FahrenheitField;
            }
            set {
                if ((this.FahrenheitField.Equals(value) != true)) {
                    this.FahrenheitField = value;
                    this.RaisePropertyChanged("Fahrenheit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather_Response", Namespace="http://schemas.datacontract.org/2004/07/WeatherWcf.Interfaces.DataTransferObjects" +
        "")]
    [System.SerializableAttribute()]
    public partial class Weather_Response : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherApp.WeatherService.Location[] locationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherApp.WeatherService.Location[] locations {
            get {
                return this.locationsField;
            }
            set {
                if ((object.ReferenceEquals(this.locationsField, value) != true)) {
                    this.locationsField = value;
                    this.RaisePropertyChanged("locations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWorldTemperatures", ReplyAction="http://tempuri.org/IWeatherService/GetWorldTemperaturesResponse")]
        WeatherApp.WeatherService.Location[] GetWorldTemperatures();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWorldTemperatures", ReplyAction="http://tempuri.org/IWeatherService/GetWorldTemperaturesResponse")]
        System.Threading.Tasks.Task<WeatherApp.WeatherService.Location[]> GetWorldTemperaturesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWorldTemperaturesSoap", ReplyAction="http://tempuri.org/IWeatherService/GetWorldTemperaturesSoapResponse")]
        WeatherApp.WeatherService.Weather_Response GetWorldTemperaturesSoap(WeatherApp.WeatherService.Weather_Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWorldTemperaturesSoap", ReplyAction="http://tempuri.org/IWeatherService/GetWorldTemperaturesSoapResponse")]
        System.Threading.Tasks.Task<WeatherApp.WeatherService.Weather_Response> GetWorldTemperaturesSoapAsync(WeatherApp.WeatherService.Weather_Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetEuropeanTemperatures", ReplyAction="http://tempuri.org/IWeatherService/GetEuropeanTemperaturesResponse")]
        WeatherApp.WeatherService.Location[] GetEuropeanTemperatures();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetEuropeanTemperatures", ReplyAction="http://tempuri.org/IWeatherService/GetEuropeanTemperaturesResponse")]
        System.Threading.Tasks.Task<WeatherApp.WeatherService.Location[]> GetEuropeanTemperaturesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetForecastData", ReplyAction="http://tempuri.org/IWeatherService/GetForecastDataResponse")]
        string GetForecastData(string filter, string filterTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetForecastData", ReplyAction="http://tempuri.org/IWeatherService/GetForecastDataResponse")]
        System.Threading.Tasks.Task<string> GetForecastDataAsync(string filter, string filterTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/WeatherInfo", ReplyAction="http://tempuri.org/IWeatherService/WeatherInfoResponse")]
        WeatherApp.WeatherService.Weather_Response WeatherInfo(WeatherApp.WeatherService.Weather_Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/WeatherInfo", ReplyAction="http://tempuri.org/IWeatherService/WeatherInfoResponse")]
        System.Threading.Tasks.Task<WeatherApp.WeatherService.Weather_Response> WeatherInfoAsync(WeatherApp.WeatherService.Weather_Request request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : WeatherApp.WeatherService.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<WeatherApp.WeatherService.IWeatherService>, WeatherApp.WeatherService.IWeatherService {
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WeatherApp.WeatherService.Location[] GetWorldTemperatures() {
            return base.Channel.GetWorldTemperatures();
        }
        
        public System.Threading.Tasks.Task<WeatherApp.WeatherService.Location[]> GetWorldTemperaturesAsync() {
            return base.Channel.GetWorldTemperaturesAsync();
        }
        
        public WeatherApp.WeatherService.Weather_Response GetWorldTemperaturesSoap(WeatherApp.WeatherService.Weather_Request request) {
            return base.Channel.GetWorldTemperaturesSoap(request);
        }
        
        public System.Threading.Tasks.Task<WeatherApp.WeatherService.Weather_Response> GetWorldTemperaturesSoapAsync(WeatherApp.WeatherService.Weather_Request request) {
            return base.Channel.GetWorldTemperaturesSoapAsync(request);
        }
        
        public WeatherApp.WeatherService.Location[] GetEuropeanTemperatures() {
            return base.Channel.GetEuropeanTemperatures();
        }
        
        public System.Threading.Tasks.Task<WeatherApp.WeatherService.Location[]> GetEuropeanTemperaturesAsync() {
            return base.Channel.GetEuropeanTemperaturesAsync();
        }
        
        public string GetForecastData(string filter, string filterTable) {
            return base.Channel.GetForecastData(filter, filterTable);
        }
        
        public System.Threading.Tasks.Task<string> GetForecastDataAsync(string filter, string filterTable) {
            return base.Channel.GetForecastDataAsync(filter, filterTable);
        }
        
        public WeatherApp.WeatherService.Weather_Response WeatherInfo(WeatherApp.WeatherService.Weather_Request request) {
            return base.Channel.WeatherInfo(request);
        }
        
        public System.Threading.Tasks.Task<WeatherApp.WeatherService.Weather_Response> WeatherInfoAsync(WeatherApp.WeatherService.Weather_Request request) {
            return base.Channel.WeatherInfoAsync(request);
        }
    }
}
